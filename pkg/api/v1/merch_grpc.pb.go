// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.14.0
// source: merch.proto

package merch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MerchStore_Info_FullMethodName     = "/merch.api.v1.MerchStore/Info"
	MerchStore_SendCoin_FullMethodName = "/merch.api.v1.MerchStore/SendCoin"
	MerchStore_BuyItem_FullMethodName  = "/merch.api.v1.MerchStore/BuyItem"
	MerchStore_Auth_FullMethodName     = "/merch.api.v1.MerchStore/Auth"
)

// MerchStoreClient is the client API for MerchStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchStoreClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	SendCoin(ctx context.Context, in *SendCoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BuyItem(ctx context.Context, in *BuyItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type merchStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchStoreClient(cc grpc.ClientConnInterface) MerchStoreClient {
	return &merchStoreClient{cc}
}

func (c *merchStoreClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, MerchStore_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchStoreClient) SendCoin(ctx context.Context, in *SendCoinRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MerchStore_SendCoin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchStoreClient) BuyItem(ctx context.Context, in *BuyItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MerchStore_BuyItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchStoreClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, MerchStore_Auth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchStoreServer is the server API for MerchStore service.
// All implementations must embed UnimplementedMerchStoreServer
// for forward compatibility.
type MerchStoreServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	SendCoin(context.Context, *SendCoinRequest) (*emptypb.Empty, error)
	BuyItem(context.Context, *BuyItemRequest) (*emptypb.Empty, error)
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedMerchStoreServer()
}

// UnimplementedMerchStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMerchStoreServer struct{}

func (UnimplementedMerchStoreServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedMerchStoreServer) SendCoin(context.Context, *SendCoinRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCoin not implemented")
}
func (UnimplementedMerchStoreServer) BuyItem(context.Context, *BuyItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyItem not implemented")
}
func (UnimplementedMerchStoreServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedMerchStoreServer) mustEmbedUnimplementedMerchStoreServer() {}
func (UnimplementedMerchStoreServer) testEmbeddedByValue()                    {}

// UnsafeMerchStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchStoreServer will
// result in compilation errors.
type UnsafeMerchStoreServer interface {
	mustEmbedUnimplementedMerchStoreServer()
}

func RegisterMerchStoreServer(s grpc.ServiceRegistrar, srv MerchStoreServer) {
	// If the following call pancis, it indicates UnimplementedMerchStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MerchStore_ServiceDesc, srv)
}

func _MerchStore_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchStoreServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchStore_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchStoreServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchStore_SendCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchStoreServer).SendCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchStore_SendCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchStoreServer).SendCoin(ctx, req.(*SendCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchStore_BuyItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchStoreServer).BuyItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchStore_BuyItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchStoreServer).BuyItem(ctx, req.(*BuyItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchStore_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchStoreServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchStore_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchStoreServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchStore_ServiceDesc is the grpc.ServiceDesc for MerchStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merch.api.v1.MerchStore",
	HandlerType: (*MerchStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _MerchStore_Info_Handler,
		},
		{
			MethodName: "SendCoin",
			Handler:    _MerchStore_SendCoin_Handler,
		},
		{
			MethodName: "BuyItem",
			Handler:    _MerchStore_BuyItem_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _MerchStore_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merch.proto",
}
